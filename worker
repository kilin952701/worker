// 配置项（Worker 环境变量）
const TURNSTILE_SECRET_KEY = "0x4AAAAAABM4ehiS0ZNJcU-Q"; // 通过环境变量配置
const SITE_KEY = "0x4AAAAAABM4egLEzJzXx4-PzCoEi9t0_AE"; // 通过环境变量配置
const KV_NAMESPACE = ANTl_BOT_KV; // 绑定的 KV 命名空间变量名称
const COOKIE_NAME = "secure_token";
const BLOCK_THRESHOLD = 0.8; // 风险阈值

async function handleRequest(request) {
  const url = new URL(request.url);
  const cookie = request.headers.get("Cookie") || "";
  const userIP = request.headers.get("CF-Connecting-IP");

  // 已通过验证 → 透传
  if (cookie.includes(`${COOKIE_NAME}=`)) {
    const token = cookie.match(new RegExp(`${COOKIE_NAME}=([^;]+)`))[1];
    const isValid = await validateToken(token, userIP);
    if (isValid) return fetch(request);
  }

  // 提交验证请求 → 处理逻辑
  if (url.pathname === "/verify" && request.method === "POST") {
    return handleVerification(request, userIP);
  }

  // 首次访问 → 返回挑战页面
  return generateChallengePage(request, userIP);
}

async function handleVerification(request, userIP) {
  const formData = await request.formData();
  const turnstileToken = formData.get('cf-turnstile-response');
  const honeypot = formData.get('email');
  const fpHash = formData.get('fp');

  // 蜜罐触发 → 拦截
  if (honeypot) {
    await logMaliciousRequest(userIP, "蜜罐触发");
    return Response.redirect("https://www.youtube.com", 302);
  }

  // 校验 Turnstile
  const isHuman = await verifyTurnstile(turnstileToken, userIP);
  if (!isHuman) return new Response("验证失败", { status: 403 });

  // 计算风险评分 → 高风险跳转 YouTube
  const riskScore = await calculateRiskScore(fpHash, userIP);
  if (riskScore > BLOCK_THRESHOLD) {
    await logMaliciousRequest(userIP, "高风险用户");
    return Response.redirect("https://www.youtube.com", 302);
  }

  // 生成令牌
  const token = generateSecureToken(userIP);
  await KV_NAMESPACE.put(token, JSON.stringify({ valid: true, ip: userIP }), { expirationTtl: 3600 });

  return new Response(null, {
    status: 302,
    headers: {
      "Location": request.url,
      "Set-Cookie": `${COOKIE_NAME}=${token}; Path=/; Max-Age=3600; Secure; HttpOnly`
    }
  });
}

// 其他工具函数（verifyTurnstile、generateSecureToken等）保持原样，参考之前的代码
